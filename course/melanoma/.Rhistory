install.packages("rgl")
library('rgl')
# 0.1. loading external packages. if library is missing in your computer, use the R command: install.packages('name of the library')
library(Rtsne) # implementation of t-SNE algorithm
library(RColorBrewer) # library to access easily multiple colors for plotting
library(scatterplot3d) # library for static 3D plotting
library(rgl) # 3D Visualization Using OpenGL. If it fails in your Mac OS X, make sure you have X11 installed (https://www.xquartz.org/)
library(tictoc) # a library to profile execution time
setwd('/Users/adriandelomana/gDrive/education/isb.summer.course.2016/src/melanoma') # this line should be edited accordingly to your working directory. Type "getwd()" to know where you're at
# 3. analysis of non-malignant cells
# 3.0. reading and treating data and metadata files
print('reading and treating data...')
originalData=read.csv('data/formatted/nonMalignant.8k.genes.data.csv',header=TRUE,row.names=1)
tumorMetadata = read.csv('data/formatted/nonMalignant.8k.genes.tumorMetadata.csv', header=TRUE, row.names=1)
# selecting most variant genes
varGenes=names(sort(apply(originalData,1,var)/apply(originalData,1,mean),decreasing=T))[1:2000]
expression = originalData[varGenes,]
# 3.1. dimensionality reduction of non-malignant cells
# prepare to colorize based on single cell tumor origin
colorInterpolation=colorRampPalette(brewer.pal(9,'Set1'))
col1=colorInterpolation(length(sort(unique(tumorMetadata[,1]))))
names(col1)=sort(unique(tumorMetadata[,1]))
cols1=as.character(col1[tumorMetadata[,1]])
# computing 3D t-SNE
tic() # it may take around 5 min to execute
rtsne3d=Rtsne(t(as.matrix(expression)),dim=3,verbose=TRUE,theta=0.5,perplexity=50)
toc()
# interactive 3D scatter plot, need to close plot window by hand
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1],rtsne3d$Y[,2],rtsne3d$Y[,3],col=cols1,pch=19,xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright',legend=unique(tumorMetadata[,1]),fill=col1[unique(tumorMetadata[,1])])
# 3.2. classify immune cells
# load bulk data for tumor associated cells (immune, endothelial cells and cancer-assiciated fibroblasts (CAFs))
bulk.nonMalignant=read.csv('data/formatted/immuneEtcCentroids.csv',row.names=1,header=T)
# select genes that match to bulk expression data genes from third party data source
expression=originalData[rownames(bulk.nonMalignant),]
# classify using Single Cell Predictor
scp1=cor(bulk.nonMalignant,expression[rownames(bulk.nonMalignant),],method='spearman')
rownames(scp1)
scp1_calls=sapply(colnames(scp1),function(x){rownames(scp1)[which(scp1[,x]==max(scp1[,x]))]}) # selecting the most similar cell type
scp2_calls=sapply(names(scp1_calls),function(x){ifelse(scp1[scp1_calls[x],x]>=0.15, scp1_calls[x],NA)}) # filtering out low correlations
table(scp1_calls)
table(scp2_calls) # final tabulation of cells to each type
# assess signficance of prediction by resampling gene expression values (p-value <= 0.05 and correlation >= 0.15)
permutations=20
m1=matrix(nrow=ncol(scp1),ncol=4)
rownames(m1)=colnames(scp1)
colnames(m1)=c('Call','Cor','p_value','Final Call')
# assessing significance to each cell
tic() # Takes about 7 minutes
for(i in colnames(scp1)) {
call = NA
sub=sapply(1:permutations,function(j){cor(bulk.nonMalignant[,scp1_calls[i]],originalData[sample(rownames(originalData),nrow(bulk.nonMalignant[rownames(bulk.nonMalignant),])),i],method='spearman')})
m1[i,1]=scp1_calls[i]
m1[i,2]=scp1[scp1_calls[i],i]
m1[i,3]=length(which(sub >= scp1[scp1_calls[i],i]))/permutations
if(m1[i,3]<=0.05 && scp1[scp1_calls[i],i]>=0.15) {
call = scp1_calls[i]
}
m1[i,4] = call
}
toc()
# use prediction as colors
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])])
# assess signficance of prediction by resampling gene expression values (p-value <= 0.05 and correlation >= 0.15)
permutations=100
m1=matrix(nrow=ncol(scp1),ncol=4)
rownames(m1)=colnames(scp1)
colnames(m1)=c('Call','Cor','p_value','Final Call')
# assessing significance to each cell
tic() # Takes about 7 minutes
for(i in colnames(scp1)) {
call = NA
sub=sapply(1:permutations,function(j){cor(bulk.nonMalignant[,scp1_calls[i]],originalData[sample(rownames(originalData),nrow(bulk.nonMalignant[rownames(bulk.nonMalignant),])),i],method='spearman')})
m1[i,1]=scp1_calls[i]
m1[i,2]=scp1[scp1_calls[i],i]
m1[i,3]=length(which(sub >= scp1[scp1_calls[i],i]))/permutations
if(m1[i,3]<=0.05 && scp1[scp1_calls[i],i]>=0.15) {
call = scp1_calls[i]
}
m1[i,4] = call
}
toc()
# use prediction as colors
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])])
unique(m1[,4])
col2
#################################
### Show only one immune type ###
#################################
# Redo coloring with only one
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Replace DENDA2 with any label to see the plot colored
# with only that immune cell type
cols2[which(m1[,4]!='DENDA2')] = NA
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1], results$Y[,2], results$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2) # do legend twice because of bug in RGL
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2) # do legend twice because of bug in RGL
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1], results$Y[,2], results$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
ar3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2) # do legend twice because of bug in RGL
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2) # do legend twice because of bug in RGL
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])])
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])]) # Do legend twice because of bug in RGL
#play3d(spin3d(), duration=10)
# Need to close window by hand
# use prediction as colors
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])])
# Need to close window by hand
### Show only one immune type, for example, DENDA2
cols2[which(m1[,4]!='DENDA2')] = NA
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
# use prediction as colors
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(m1[,4]), fill=col2[unique(m1[,4])])
# Need to close window by hand
