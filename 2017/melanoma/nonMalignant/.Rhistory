0.1. loading external packages. if library is missing in your computer, use the R command: install.packages('name of the library')
library(Rtsne) # implementation of t-SNE algorithm
library(RColorBrewer) # library to access easily multiple colors for plotting
library(scatterplot3d) # library for static 3D plotting
library(rgl) # 3D Visualization Using OpenGL. If it fails in your Mac OS X, make sure you have X11 installed (https://www.xquartz.org/)
library(tictoc) # a library to profile execution time
# 0.2. defining working directory
setwd('/Users/adriandelomana/gDrive/education/isb.summer.course.2016/src/melanoma') # this line should be edited accordingly to your working directory. Type "getwd()" to know where you're at
#################################################################
# @Course: Systems Biology of Disease                           #
# @Rscript: 2_malignantCells_analysis.r                         #
# @Author: Adrian de Lomana and Chris Plaisier                  #
#                                                               #
# This source code is distributed under GNU GPL v3.0            #
# the text of which is available at:                            #
# http://choosealicense.com/licenses/gpl-3.0/                   #
#################################################################
###
### This script performs data exploration and classification of melanoma single cell transcriptomes.
### Specifically it works with transcriptomes of malignant and non-malignant cells.
###
# 0.1. loading external packages. if library is missing in your computer, use the R command: install.packages('name of the library')
library(Rtsne) # implementation of t-SNE algorithm
library(RColorBrewer) # library to access easily multiple colors for plotting
library(scatterplot3d) # library for static 3D plotting
library(rgl) # 3D Visualization Using OpenGL. If it fails in your Mac OS X, make sure you have X11 installed (https://www.xquartz.org/)
library(tictoc) # a library to profile execution time
# 0.2. defining working directory
setwd('/Users/adriandelomana/gDrive/education/isb.summer.course.2016/src/melanoma') # this line should be edited accordingly to your working directory. Type "getwd()" to know where you're at
# 1. reading the data and metadata for malignant cells
print('reading and treating data...')
expression=read.csv('data/formatted/malignant.8k.genes.data.csv',header=TRUE,row.names=1)
transposedExpression=as.data.frame(t(expression)) # transposing the original data in the appropriate form
tumorMetadata=read.csv('data/formatted/malignant.8k.genes.tumorMetadata.csv',header=TRUE,row.names=1)
# 2. dimensionality reduction analysis
# 2.0. setting some variables for plotting
tumorLabels=as.character(tumorMetadata$tumor.label)
plottingColors=brewer.pal(length(unique(tumorLabels)),'Dark2')
names(plottingColors)=unique(tumorLabels)
# 2.1. PCA
print('running PCA...')
tic()
pcaResults=prcomp(transposedExpression)
toc()
# plotting
pdf('figure.malignantCells.pca.pdf')
plot(pcaResults$x[,'PC1'],pcaResults$x[,'PC2'],main='PCA of malignant cells',col=plottingColors[tumorLabels],pch=19,xlab='PC 1',ylab='PC 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2. t-SNE
print('running t-SNE...')
# 2.2.1. low resolution of t-SNE
print('running 2D t-SNE with small perplexity...')
tic()
results=Rtsne(transposedExpression,dims=2,perplexity=5,verbose=TRUE)
toc()
# plotting
pdf('figure.malignantCells.tsne.2d.lowres.pdf')
plot(results$Y,main='tSNE of malignant cells, p=5',col=plottingColors[tumorLabels],pch=19,xlab='tSNE 1',ylab='tSNE 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2.2. high resolution of t-SNE
print('running 2D t-SNE with large perplexity...')
tic()
results=Rtsne(transposedExpression,dims=2,perplexity=50,verbose=TRUE)
toc()
# plotting
pdf('figure.malignantCells.tsne.2d.hires.pdf')
plot(results$Y,main='tSNE of malignant cells, p=50',col=plottingColors[tumorLabels],pch=19,xlab='tSNE 1',ylab='tSNE 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2.3. high resolution of t-SNE showing 3D
print('running 3D t-SNE with large perplexity...')
tic()
results=Rtsne(transposedExpression,dims=3,perplexity=50,verbose=TRUE)
toc()
# static 3D scatter plot of tSNE
pdf('figure.malignantCells.tsne.3d.hires.pdf')
scatterplot3d(results$Y[,1],results$Y[,2],results$Y[,3],color=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# interactive 3D scatter plot. You will need to close the interactive plot window when you're done with it
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1],results$Y[,2],results$Y[,3],col=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend3d('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
# let's make a play from the data! Again, you will need to close the interactive plot window when you're done with it
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1],results$Y[,2],results$Y[,3],col=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend3d('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
play3d(spin3d(),duration=20)
expression=read.csv('data/formatted/malignant.8k.genes.data.csv',header=TRUE,row.names=1)
#################################################################
# @Course: Systems Biology of Disease                           #
# @Rscript: 2_malignantCells_analysis.r                         #
# @Author: Adrian de Lomana and Chris Plaisier                  #
#                                                               #
# This source code is distributed under GNU GPL v3.0            #
# the text of which is available at:                            #
# http://choosealicense.com/licenses/gpl-3.0/                   #
#################################################################
###
### This script performs data exploration and classification of melanoma single cell transcriptomes.
### Specifically it works with transcriptomes of malignant and non-malignant cells.
###
# 0.1. loading external packages. if library is missing in your computer, use the R command: install.packages('name of the library')
library(Rtsne) # implementation of t-SNE algorithm
library(RColorBrewer) # library to access easily multiple colors for plotting
library(scatterplot3d) # library for static 3D plotting
library(rgl) # 3D Visualization Using OpenGL. If it fails in your Mac OS X, make sure you have X11 installed (https://www.xquartz.org/)
library(tictoc) # a library to profile execution time
# 0.2. defining working directory
setwd('/Users/adriandelomana/gDrive/education/isb.summer.course.2016/src/melanoma/malignantCells/') # this line should be edited accordingly to your working directory. Type "getwd()" to know where you're at
# 1. reading the data and metadata for malignant cells
print('reading and treating data...')
expression=read.csv('data/formatted/malignant.8k.genes.data.csv',header=TRUE,row.names=1)
transposedExpression=as.data.frame(t(expression)) # transposing the original data in the appropriate form
tumorMetadata=read.csv('data/formatted/malignant.8k.genes.tumorMetadata.csv',header=TRUE,row.names=1)
# 2. dimensionality reduction analysis
# 2.0. setting some variables for plotting
tumorLabels=as.character(tumorMetadata$tumor.label)
plottingColors=brewer.pal(length(unique(tumorLabels)),'Dark2')
names(plottingColors)=unique(tumorLabels)
# 2.1. PCA
print('running PCA...')
tic()
pcaResults=prcomp(transposedExpression)
toc()
# plotting
pdf('figure.malignantCells.pca.pdf')
plot(pcaResults$x[,'PC1'],pcaResults$x[,'PC2'],main='PCA of malignant cells',col=plottingColors[tumorLabels],pch=19,xlab='PC 1',ylab='PC 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2. t-SNE
print('running t-SNE...')
# 2.2.1. low resolution of t-SNE
print('running 2D t-SNE with small perplexity...')
tic()
results=Rtsne(transposedExpression,dims=2,perplexity=5,verbose=TRUE)
toc()
# plotting
pdf('figure.malignantCells.tsne.2d.lowres.pdf')
plot(results$Y,main='tSNE of malignant cells, p=5',col=plottingColors[tumorLabels],pch=19,xlab='tSNE 1',ylab='tSNE 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2.2. high resolution of t-SNE
print('running 2D t-SNE with large perplexity...')
tic()
results=Rtsne(transposedExpression,dims=2,perplexity=50,verbose=TRUE)
toc()
# plotting
pdf('figure.malignantCells.tsne.2d.hires.pdf')
plot(results$Y,main='tSNE of malignant cells, p=50',col=plottingColors[tumorLabels],pch=19,xlab='tSNE 1',ylab='tSNE 2')
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# 2.2.3. high resolution of t-SNE showing 3D
print('running 3D t-SNE with large perplexity...')
tic()
results=Rtsne(transposedExpression,dims=3,perplexity=50,verbose=TRUE)
toc()
# static 3D scatter plot of tSNE
pdf('figure.malignantCells.tsne.3d.hires.pdf')
scatterplot3d(results$Y[,1],results$Y[,2],results$Y[,3],color=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
dev.off() # don't forget this command, it closes the PDF file, so you can cleanly open it!
# interactive 3D scatter plot. You will need to close the interactive plot window when you're done with it
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1],results$Y[,2],results$Y[,3],col=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend3d('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
# let's make a play from the data! Again, you will need to close the interactive plot window when you're done with it
par3d(windowRect=c(50,50,700,700))
plot3d(results$Y[,1],results$Y[,2],results$Y[,3],col=plottingColors[tumorLabels],xlab='tSNE 1',ylab='tSNE 2',zlab='tSNE 3',pch=19)
legend3d('topright',legend=unique(tumorLabels),fill=plottingColors[unique(tumorLabels)])
play3d(spin3d(),duration=20)
#################################################################
# @Course: Systems Biology of Disease                           #
# @Rscript: dimensionalityReduction.R                           #
# @Author: Adrian de Lomana and Chris Plaisier                  #
#                                                               #
# This source code is distributed under GNU GPL v3.0            #
# the text of which is available at:                            #
# http://choosealicense.com/licenses/gpl-3.0/                   #
#################################################################
################################################################################
### This script explores the expression of single cells from melanoma tumors ###
### and performs classification of immune cells from single cell             ###
### transcriptomes of melanoma tumors.                                       ###
################################################################################
########################
### Loading packages ###
########################
# Loading external packages. if library is missing in your computer, use the R command: install.packages('name of the library')
library(Rtsne) # implementation of t-SNE algorithm
library(RColorBrewer) # library to access easily multiple colors for plotting
library(scatterplot3d) # library for static 3D plotting
library(rgl) # 3D Visualization Using OpenGL
library(tictoc)
library(scatterplot3d)
##############################
### Loadata for analysis ###
##############################
# Set your working directory
setwd("/Users/adriandelomana/gDrive/education/isb.summer.course.2016/src/melanoma/nonMalignant")
# Reading the data and metadata
print('reading and treating data...')
originalData = read.csv('data/formatted/immuneCells.8k.genes.data.csv', header=TRUE, row.names=1)
tumorMetadata = read.csv('data/formatted/immuneCells.8k.genes.tumorMetadata.csv', header=TRUE, row.names=1)
# Load centroids for immune, CAF, and Endothelial cells
centroids.immune = read.csv('data/formatted/immuneEtcCentroids.csv',row.names=1,header=T)
# Select genes that match to centroid genes
expression = originalData[rownames(centroids.immune),]
##################################
### Exploring single cell data ###
##################################
# Prepare to colorize based on single cell tumor origin
colorInterpolation = colorRampPalette(brewer.pal(9,'Set1'))
col1 = colorInterpolation(length(sort(unique(tumorMetadata[,1]))))
names(col1) = sort(unique(tumorMetadata[,1]))
cols1 = as.character(col1[tumorMetadata[,1]])
##################
## Compute tSNE ##
##################
# 3D tSNE
tic()
rtsne3d = Rtsne(t(as.matrix(expression)),dim=3,perplexity=50)
toc()
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols1, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=unique(tumorMetadata[,1]), fill=col1[unique(tumorMetadata[,1])])
#play3d(spin3d(), duration=5)
# Need to close window by hand
################################
### Classify to immune cells ###
################################
# Classify using Single Cell Predictor
scp1 = cor(centroids.immune, expression, method='spearman')
rownames(scp1)
scp1_calls = sapply(colnames(scp1), function(x) { rownames(scp1)[which(scp1[,x]==max(scp1[,x]))] })
scp2_calls = sapply(names(scp1_calls), function(x) { ifelse(scp1[scp1_calls[x],x]>=0.1, scp1_calls[x], NA) } )
table(scp2_calls) # Tabulation of cells to each type
######################################
### Significance of predcitions by ###
### resampling of genes, and calls ###
### based on significance.         ###
###                                ###
### Cell type calls made based on: ###
###  1. p-value <= 0.05            ###
###  2. R >= 0.1                   ###
######################################
permutations = 100
m1 = matrix(nrow=ncol(scp1), ncol=4)
rownames(m1) = colnames(scp1)
colnames(m1) = c('Call','Cor','p_value','Final Call')
# For each single cell, and bulk tumor
tic() # Takes about 7 minutes
for(i in colnames(scp1)) {
call = NA
sub = sapply(1:permutations, function(j) { cor(centroids.immune[,scp1_calls[i]], originalData[sample(rownames(originalData),nrow(centroids.immune)), i], method='spearman') })
m1[i,1] = scp1_calls[i]
m1[i,2] = scp1[scp1_calls[i],i]
m1[i,3] = length(which(sub >= scp1[scp1_calls[i],i]))/permutations
if(m1[i,3]<=0.05 && scp1[scp1_calls[i],i]>=0.1) {
call = scp1_calls[i]
}
m1[i,4] = call
}
toc()
table(m1[,4])
###########################################
### Colorize using immune cell analysis ###
###########################################
# Prepare colors for plotting
colorInterpolation = colorRampPalette(brewer.pal(10,'Paired'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Interactive 3D scatter plot
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, type='s', size=0.5, xlab='tSNE1',ylab='tSNE2',zlab='tSNE3')
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2[sort(unique(m1[,4]))])
#play3d(spin3d(), duration=10)
# Need to close window by hand
#################################
### Show only one immune type ###
#################################
# Redo coloring with only one
colorInterpolation = colorRampPalette(brewer.pal(10,'Paired'))
col2 = colorInterpolation(length(sort(unique(m1[,4]))))
names(col2) = sort(unique(m1[,4]))
cols2 = as.character(col2[m1[,4]])
# Replace DENDA2 with any label to see the plot colored
# with only that immune cell type
cols2[which(m1[,4]!='BASO1')] = NA
par3d(windowRect=c(50,50,700,700))
plot3d(rtsne3d$Y[,1], rtsne3d$Y[,2], rtsne3d$Y[,3], col=cols2, xlab='tSNE 1', ylab='tSNE 2', zlab='tSNE 3',pch=19, type='s', size=0.5)
legend3d('topright', legend=sort(unique(m1[,4])), fill=col2)
#play3d(spin3d(),duration=10)
